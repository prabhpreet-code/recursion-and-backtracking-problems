Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively. Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item or donâ€™t pick it (0-1 property).

knapsack-problem
input:{40,20,30,10}
{1,2,3,5}
7
output:140

*********************************************************************************************************************************************************
#include <iostream>
#include <string>
    using namespace std;

    int knapSack(int arr[] , int weight[] , int wt , int n)
    {
        if (wt==0 || n==0)
        {
            return 0 ;
        }
        int inc=0, exc=0 ;
        if (weight[n-1] <= wt)
        {
                inc = arr[n-1]+knapSack(arr , weight , wt-weight[n-1] , n-1) ;
        }
        exc = knapSack(arr , weight , wt , n-1) ;
         
        return max(inc , exc) ;
        
    }

    int main()
    {
        int arr[] = {40,20,30,100} , wt;
        int weight[] = {1,2,3,5} ;
        cout << "Enter the desired weight" << endl;
        cin >> wt;
        int n = sizeof(arr)/sizeof(arr[0]) ;
        int output = knapSack(arr , weight , wt ,n);
        cout<<output<<endl ;
        return 0;
    }
